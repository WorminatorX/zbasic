package zbasic.generator.zvm;

public enum Opcode {
    NOP(0x00), RDV(0x10), INC(0x20), LEN(0x30),
    CAP(0x01), ARG(0x11), DEC(0x21), CAT(0x31),
    CAL(0x02), LLV(0x12), NEG(0x22), TOS(0x32),
    RET(0x03), LSV(0x13), NOT(0x23), VAL(0x33),
    BRA(0x04), LAI(0x14), AND(0x24), MSB(0x34),
    BFA(0x05), LAS(0x15), ORR(0x25), LSB(0x35),
    BTR(0x06), SLV(0x16), XOR(0x26), RSB(0x36),
    NTR(0x07), SSV(0x17), ADD(0x27), ISB(0x37),
    NSB(0x08), SAI(0x18), SUB(0x28), FSB(0x38),
    NUB(0x09), SAS(0x19), MUL(0x29), SDS(0x39),
    NZE(0x0A), CNE(0x1A), DIV(0x2A), INS(0x3A),
    NUM(0x0B), CEQ(0x1B), MOD(0x2B), INN(0x3B),
    STR(0x0C), CLT(0x1C), ABS(0x2C), OUC(0x3C),
    DUP(0x0D), CLE(0x1D), RND(0x2D), OUS(0x3D),
    DEL(0x0E), CGT(0x1E), TMR(0x2E), OUN(0x3E),
    ARR(0x0F), CGE(0x1F), SDA(0x2F), CLS(0x3F),

    S00(0xA0), B00(0xB0), C00(0xC0), COP(0xD0), FIL(0xE0), BRK(0xF0),
    S01(0xA1), B01(0xB1), C01(0xC1), L01(0xD1), R01(0xE1), U01(0xF1),
    S02(0xA2), B02(0xB2), C02(0xC2), L02(0xD2), R02(0xE2), U02(0xF2),
    S03(0xA3), B03(0xB3), C03(0xC3), L03(0xD3), R03(0xE3), U03(0xF3),
    S04(0xA4), B04(0xB4), C04(0xC4), L04(0xD4), R04(0xE4), U04(0xF4),
    S05(0xA5), B05(0xB5), C05(0xC5), L05(0xD5), R05(0xE5), U05(0xF5),
    S06(0xA6), B06(0xB6), C06(0xC6), L06(0xD6), R06(0xE6), U06(0xF6),
    S07(0xA7), B07(0xB7), C07(0xC7), L07(0xD7), R07(0xE7), U07(0xF7),
    S08(0xA8), B08(0xB8), C08(0xC8), L08(0xD8), R08(0xE8), U08(0xF8),
    S09(0xA9), B09(0xB9), C09(0xC9), L09(0xD9), R09(0xE9), U09(0xF9),
    S10(0xAA), B10(0xBA), C10(0xCA), L10(0xDA), R10(0xEA), U10(0xFA),
    S11(0xAB), B11(0xBB), C11(0xCB), L11(0xDB), R11(0xEB), U11(0xFB),
    S12(0xAC), B12(0xBC), C12(0xCC), L12(0xDC), R12(0xEC), U12(0xFC),
    S13(0xAD), B13(0xBD), C13(0xCD), L13(0xDD), R13(0xED), U13(0xFD),
    S14(0xAE), B14(0xBE), C14(0xCE), L14(0xDE), R14(0xEE), U14(0xFE),
    S15(0xAF), B15(0xBF), C15(0xCF), L15(0xDF), R15(0xEF), U15(0xFF);

    private int code;

    private Opcode(int code) {
        this.code = code;
    }

    public int getCode(int code) { return code; }

    public static Opcode byCode(int code) {
        final Opcode[] opcodes = values();
        for (Opcode opcode : opcodes) {
            if (opcode.code == code) { return opcode; }
        }
        return NOP;
    }
}
